// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               unknown
// source: proto/queue-bridge.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "queuebridge";

export interface QueueMessage {
  queueId: string;
  message: Uint8Array;
}

export interface EmptyResponse {
}

export interface PushBatchRequest {
  messages: QueueMessage[];
}

function createBaseQueueMessage(): QueueMessage {
  return { queueId: "", message: new Uint8Array(0) };
}

export const QueueMessage: MessageFns<QueueMessage> = {
  encode(message: QueueMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.queueId !== "") {
      writer.uint32(10).string(message.queueId);
    }
    if (message.message.length !== 0) {
      writer.uint32(18).bytes(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.queueId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueMessage {
    return {
      queueId: isSet(object.queueId) ? globalThis.String(object.queueId) : "",
      message: isSet(object.message) ? bytesFromBase64(object.message) : new Uint8Array(0),
    };
  },

  toJSON(message: QueueMessage): unknown {
    const obj: any = {};
    if (message.queueId !== "") {
      obj.queueId = message.queueId;
    }
    if (message.message.length !== 0) {
      obj.message = base64FromBytes(message.message);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueMessage>, I>>(base?: I): QueueMessage {
    return QueueMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueMessage>, I>>(object: I): QueueMessage {
    const message = createBaseQueueMessage();
    message.queueId = object.queueId ?? "";
    message.message = object.message ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEmptyResponse(): EmptyResponse {
  return {};
}

export const EmptyResponse: MessageFns<EmptyResponse> = {
  encode(_: EmptyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyResponse {
    return {};
  },

  toJSON(_: EmptyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyResponse>, I>>(base?: I): EmptyResponse {
    return EmptyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyResponse>, I>>(_: I): EmptyResponse {
    const message = createBaseEmptyResponse();
    return message;
  },
};

function createBasePushBatchRequest(): PushBatchRequest {
  return { messages: [] };
}

export const PushBatchRequest: MessageFns<PushBatchRequest> = {
  encode(message: PushBatchRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      QueueMessage.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PushBatchRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePushBatchRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(QueueMessage.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PushBatchRequest {
    return {
      messages: globalThis.Array.isArray(object?.messages)
        ? object.messages.map((e: any) => QueueMessage.fromJSON(e))
        : [],
    };
  },

  toJSON(message: PushBatchRequest): unknown {
    const obj: any = {};
    if (message.messages?.length) {
      obj.messages = message.messages.map((e) => QueueMessage.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PushBatchRequest>, I>>(base?: I): PushBatchRequest {
    return PushBatchRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PushBatchRequest>, I>>(object: I): PushBatchRequest {
    const message = createBasePushBatchRequest();
    message.messages = object.messages?.map((e) => QueueMessage.fromPartial(e)) || [];
    return message;
  },
};

export interface QueueBridgeBalancer {
  Push(request: QueueMessage): Promise<EmptyResponse>;
  PushBatch(request: PushBatchRequest): Promise<EmptyResponse>;
}

export const QueueBridgeBalancerServiceName = "queuebridge.QueueBridgeBalancer";
export class QueueBridgeBalancerClientImpl implements QueueBridgeBalancer {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueueBridgeBalancerServiceName;
    this.rpc = rpc;
    this.Push = this.Push.bind(this);
    this.PushBatch = this.PushBatch.bind(this);
  }
  Push(request: QueueMessage): Promise<EmptyResponse> {
    const data = QueueMessage.encode(request).finish();
    const promise = this.rpc.request(this.service, "Push", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }

  PushBatch(request: PushBatchRequest): Promise<EmptyResponse> {
    const data = PushBatchRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "PushBatch", data);
    return promise.then((data) => EmptyResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
